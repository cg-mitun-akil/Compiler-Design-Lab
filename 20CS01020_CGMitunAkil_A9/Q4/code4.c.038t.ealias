
;; Function func (func, funcdef_no=119, decl_uid=3493, cgraph_uid=120, symbol_order=119)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
n = &NONLOCAL
_1 = n
_1 = &NONLOCAL
callescape(11) = NONLOCAL
CALLUSED(12) = callescape(11)
callarg(14) = _1
callarg(14) = callarg(14) + UNKNOWN
callarg(14) = *callarg(14) + UNKNOWN
CALLUSED(12) = callarg(14)
*callarg(14) = callescape(11)
CALLCLOBBERED(13) = callarg(14)
callescape(11) = callarg(14)
ESCAPED = _1
_2 = NONLOCAL
_2 = callarg(14)
_3 = n
_3 = &NONLOCAL
callescape(17) = NONLOCAL
CALLUSED(18) = callescape(17)
callarg(20) = _3
callarg(20) = callarg(20) + UNKNOWN
callarg(20) = *callarg(20) + UNKNOWN
CALLUSED(18) = callarg(20)
*callarg(20) = callescape(17)
CALLCLOBBERED(19) = callarg(20)
callescape(17) = callarg(20)
ESCAPED = _3
_4 = NONLOCAL
_4 = callarg(20)
_11 = _2
_11 = _4
_5 = &NONLOCAL
_5 = &NONLOCAL
_5 = _11

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { NONLOCAL }
_1 = { NONLOCAL } same as n
func = { }
callescape(11) = { ESCAPED NONLOCAL }
CALLUSED(12) = { ESCAPED NONLOCAL } same as callescape(11)
CALLCLOBBERED(13) = { ESCAPED NONLOCAL } same as callarg(14)
callarg(14) = { ESCAPED NONLOCAL }
_2 = { ESCAPED NONLOCAL } same as callescape(11)
_3 = { NONLOCAL } same as n
callescape(17) = { ESCAPED NONLOCAL }
CALLUSED(18) = { ESCAPED NONLOCAL } same as callescape(17)
CALLCLOBBERED(19) = { ESCAPED NONLOCAL } same as callarg(20)
callarg(20) = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as callescape(17)
_11 = { ESCAPED NONLOCAL }
_5 = { ESCAPED NONLOCAL } same as _11


Alias information for func

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


int func (int n)
{
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _11;

  <bb 2> :
  if (n_7(D) == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 4> :
  if (n_7(D) == 2)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 7>; [INV]

  <bb 6> :
  _1 = n_7(D) + -1;
  _2 = func (_1);
  _3 = n_7(D) + -2;
  _4 = func (_3);
  _11 = _2 + _4;
  // predicted unlikely by early return (on trees) predictor.

  <bb 7> :
  # _5 = PHI <1(3), 2(5), _11(6)>
  return _5;

}



;; Function main (main, funcdef_no=120, decl_uid=3495, cgraph_uid=121, symbol_order=120)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
callescape(9) = &NONLOCAL
CALLUSED(10) = callescape(9)
callarg(12) = &NONLOCAL
callarg(12) = callarg(12) + UNKNOWN
a_6 = &NONLOCAL
a_6 = callarg(12)
callescape(14) = &NONLOCAL
CALLUSED(15) = callescape(14)
callarg(17) = &NONLOCAL
callarg(17) = callarg(17) + UNKNOWN
a_8 = &NONLOCAL
a_8 = callarg(17)
callescape(20) = NONLOCAL
CALLUSED(21) = callescape(20)
callarg(23) = &STRING
callarg(23) = callarg(23) + UNKNOWN
callarg(23) = *callarg(23) + UNKNOWN
CALLUSED(21) = callarg(23)
*callarg(23) = callescape(20)
CALLCLOBBERED(22) = callarg(23)
callescape(20) = callarg(23)
ESCAPED = &STRING
callarg(24) = &NONLOCAL
callarg(24) = callarg(24) + UNKNOWN
callarg(24) = *callarg(24) + UNKNOWN
CALLUSED(21) = callarg(24)
*callarg(24) = callescape(20)
CALLCLOBBERED(22) = callarg(24)
callescape(20) = callarg(24)
ESCAPED = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
func = { }
callescape(9) = { NONLOCAL }
CALLUSED(10) = { NONLOCAL } same as callescape(9)
CALLCLOBBERED(11) = { }
callarg(12) = { NONLOCAL }
a_6 = { NONLOCAL } same as callarg(12)
callescape(14) = { NONLOCAL } same as callescape(9)
CALLUSED(15) = { NONLOCAL } same as callescape(9)
CALLCLOBBERED(16) = { }
callarg(17) = { NONLOCAL }
a_8 = { NONLOCAL } same as callarg(17)
printf = { }
callescape(20) = { STRING ESCAPED NONLOCAL }
CALLUSED(21) = { STRING ESCAPED NONLOCAL } same as callescape(20)
CALLCLOBBERED(22) = { STRING ESCAPED NONLOCAL }
callarg(23) = { STRING }
callarg(24) = { ESCAPED NONLOCAL }
main = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


int main ()
{
  int a;

  <bb 2> :
  a_6 = func (67);
  a_8 = func (5);
  printf ("%d", 3);
  return 0;

}


